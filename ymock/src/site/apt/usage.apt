 ------
 Usage
 ------
 Yegor Bugayenko
 ------
 2011-05-23
 ------

~~
~~ Copyright (c) 2011, yMock.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the yMock.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~
~~ @version $Id$
~~

How to use yMock in a Java project?

  First of all, these dependencies should be in <<<pom.xml>>>:

+--
<dependency>
  <groupId>com.ymock</groupId>
  <artifactId>ymock-client</artifactId>
  <version>1.0</version>
</dependency>
<dependency>
  <groupId>com.ymock</groupId>
  <artifactId>ymock-server</artifactId>
  <version>1.0</version>
</dependency>
+--

  Then, inside your legacy application, you instantiate and use
  {{{./ymock-client/apidocs/com/ymock/client/YMockClient.html}<<<YMockClient>>>}:

+--
package com.example;
import com.ymock.client.YMockClient;
public final class LegacyApplication {
  public String getName() {
    String name;
    // We comment this line and replace it with a call
    // to YMockClient, which will be caught later in YMockServer
    // during unit testing:
    // name = makeVeryExpensiveCallToThirdPartyResource();
    name = new YMockClient("app1").call("name");
    return name;
  }
}
+--

  This is your unit test, that validates the system under testing
  (legacy application), using
  {{{./ymock-server/apidocs/com/ymock/server/YMockServer.html}<<<YMockServer>>>}:

+--
package com.example;
import com.ymock.client.YMockServer;
import org.junit.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
public final class LegacyTest {
  @Test
  public void testDataManipulations() {
    final YMockServer server = new YMockServer("app1");
    server.when("name", "John Doe");
    assertThat(
      new LegacyApplication().getName(),
      is(equalTo("John Doe"))
    );
  }
}
+--

  That's it.

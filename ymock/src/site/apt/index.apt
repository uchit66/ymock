 ------
 Introduction to yMock
 ------
 Yegor Bugayenko
 ------
 2011-05-09
 ------

~~
~~ Copyright (c) 2011, yMock.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the yMock.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~
~~ @version $Id$
~~

Introduction

  yMock is a mocking library for legacy applications:

[tikz/index-components.png] UML Components Diagram

  Legacy application depends on a third-party resource, which
  can't be used during testing, for many reasons. You find the
  place in the legacy application ("adapter"), which is responsible
  for making calls to such a third-party resource. You re-route
  all calls to a custom "mock", which instantiates
  {{{./ymock-client/apidocs/com/ymock/client/YMockClient.html}<<<YMockClient>>>}}.
  Responses received you send back to the "adapter".

  In the unit test you instantiate
  {{{./ymock-server/apidocs/com/ymock/server/YMockServer.html}<<<YMockServer>>>}},
  which listens to HTTP requests from the client. You configure the
  server with custom "matchers" and "responses".

  Now you can safely call legacy application and mimic the
  behavior of the third-party resource from inside the unit test.

  See some more Java {{{./usage.html}examples}}.

<?xml version="1.0"?>
<!--
 *
 * Copyright (c) 2011, yMock.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met: 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the following
 * disclaimer. 2) Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution. 3) Neither the name of the yMock.com nor
 * the names of its contributors may be used to endorse or promote
 * products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @version $Id$
 *
 * Release management is done with oss.sonatype.org Nexus platform. Every
 * time you want to make a new release of the product use the
 * instructions from this page:
 * @link http://www.sonatype.com/books/nexus-book/reference/staging-sect-managing-plugin.html
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.ymock</groupId>
    <artifactId>ymock</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>yMock</name>

    <modules>
        <module>ymock-commons</module>
        <module>ymock-util</module>
        <module>ymock-tk</module>
        <module>ymock-client</module>
        <module>ymock-server</module>
        <module>ymock-cli</module>
        <module>ymock-mocks</module>
    </modules>

    <description>
        <![CDATA[
        Mocking Library.
        ]]>
    </description>
    <url>http://www.ymock.com</url>
    <inceptionYear>2011</inceptionYear>

    <organization>
        <name>yMock.com</name>
        <url>http://www.ymock.com</url>
    </organization>

    <licenses>
        <license>
            <name>BSD</name>
            <url>http://www.ymock.com/LICENSE.txt</url>
            <distribution>repo</distribution>
            <comments>
                <![CDATA[
                This is free open source project, feel free to redistribute it
                ]]>
            </comments>
        </license>
    </licenses>

    <mailingLists>
        <mailingList>
            <name>yMock Discussions</name>
            <subscribe>ymock@googlegroups.com</subscribe>
            <unsubscribe>ymock@googlegroups.com</unsubscribe>
            <post>ymock@googlegroups.com</post>
            <archive>http://groups.google.com/group/ymock</archive>
        </mailingList>
    </mailingLists>

    <developers>
        <developer>
            <id>1</id>
            <name>Yegor Bugayenko</name>
            <email>yegor@ymock.com</email>
            <organization>yMock.com</organization>
            <organizationUrl>http://www.ymock.com</organizationUrl>
            <roles>
                <role>Architect</role>
                <role>Developer</role>
            </roles>
            <timezone>+1</timezone>
        </developer>
    </developers>

    <issueManagement>
        <system>trac</system>
        <url>http://trac.fazend.com/ymock/</url>
    </issueManagement>

    <ciManagement>
        <system>hudson</system>
        <url>http://hudson.fazend.com/hudson/job/ymock</url>
    </ciManagement>

    <scm>
        <connection>scm:svn:svn://svn.fazend.com/ymock/trunk/ymock</connection>
        <developerConnection>scm:svn:svn://svn.fazend.com/ymock/trunk/ymock</developerConnection>
        <url>http://svn.fazend.com/ymock/trunk/ymock</url>
    </scm>

    <distributionManagement>
        <downloadUrl>https://oss.sonatype.org/content/groups/public</downloadUrl>
        <repository>
            <uniqueVersion>false</uniqueVersion>
            <id>sonatype-nexus-staging</id>
            <name>Sonatype OSS Repository</name>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
        <snapshotRepository>
            <uniqueVersion>false</uniqueVersion>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype OSS Repository</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <site>
            <id>www.ymock.com</id>
            <name>yMock.com Project Site</name>
            <url>${site.deploy.url}</url>
        </site>
    </distributionManagement>

    <prerequisites>
        <maven>3.0</maven>
    </prerequisites>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jdk.version>1.6</jdk.version>
        <!--
        ISO 8601, see http://en.wikipedia.org/wiki/ISO_8601. This
        property is defined in order to give us an ability to use ${maven.build.timestamp}
        later in the file
        -->
        <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
    </properties>

    <repositories>
        <!--
        intentionally empty
        @see http://www.sonatype.com/people/2009/02/why-putting-repositories-in-your-poms-is-a-bad-idea/
        -->
    </repositories>

    <pluginRepositories>
        <!--
        intentionally empty
        @see http://www.sonatype.com/people/2009/02/why-putting-repositories-in-your-poms-is-a-bad-idea/
        -->
    </pluginRepositories>

    <profiles>
        <profile>
            <id>prerequisites</id>
            <activation>
                <property><name>ci</name></property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <!--
                            This is an extra validation mechanism, that enforces
                            explicit version numbering across the POM.XML file.
                            It's important to work this way, because sudden
                            version changing may lead to broken builds.
                            -->
                            <artifactId>maven-enforcer-plugin</artifactId>
                            <version>1.0-beta-1</version>
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>enforce-it</id>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <phase>validate</phase>
                                <configuration>
                                    <rules>
                                        <requireMavenVersion>
                                            <version>3.0.3</version>
                                        </requireMavenVersion>
                                        <requireJavaVersion>
                                            <version>${jdk.version}</version>
                                        </requireJavaVersion>
                                        <requireOS>
                                            <family>unix</family>
                                        </requireOS>
                                    </rules>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
            Continuous integration specific settings.
            -->
            <id>ci</id>
            <activation>
                <property><name>ci</name></property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <!--
                            Here we add just generated {buildNumber}
                            into the JAR MANIFEST.MF
                            -->
                            <artifactId>maven-jar-plugin</artifactId>
                            <!-- version is in build/pluginManagement section -->
                            <configuration>
                                <archive>
                                    <manifestEntries>
                                        <REMPL-Revision>${buildNumber}</REMPL-Revision>
                                        <REMPL-Version>${project.version}</REMPL-Version>
                                        <REMPL-Date>${maven.build.timestamp}</REMPL-Date>
                                    </manifestEntries>
                                </archive>
                            </configuration>
                        </plugin>
                        <plugin>
                            <artifactId>maven-assembly-plugin</artifactId>
                            <version>2.2</version>
                            <dependencies>
                                <dependency>
                                    <groupId>com.ymock</groupId>
                                    <artifactId>ymock-tk</artifactId>
                                    <version>1.0-SNAPSHOT</version>
                                </dependency>
                            </dependencies>
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <artifactId>maven-assembly-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <descriptorRefs>
                                        <!--
                                        This descriptor is in ymock-tk sub-module, which is in classpath of
                                        this plugin.
                                        @see http://maven.apache.org/plugins/maven-assembly-plugin/examples/sharing-descriptors.html
                                        -->
                                        <descriptorRef>ymock-sources</descriptorRef>
                                    </descriptorRefs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>buildnumber-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>create-main</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>create</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
            Site for production deployment
            -->
            <id>site-in-production</id>
            <activation>
                <property><name>site</name></property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>com.rempl.plugins</groupId>
                            <artifactId>rempl-maven-plugin</artifactId>
                            <version>1.2-SNAPSHOT</version>
                        </plugin>
                        <plugin>
                            <artifactId>maven-project-info-reports-plugin</artifactId>
                            <version>2.2</version> <!-- 7 Nov 2010 -->
                        </plugin>
                        <plugin>
                            <artifactId>maven-site-plugin</artifactId>
                            <!-- version defined in build/pluginManagement section -->
                            <configuration>
                                <reportPlugins>
                                    <plugin>
                                        <artifactId>maven-project-info-reports-plugin</artifactId>
                                        <configuration>
                                            <dependencyDetailsEnabled>false</dependencyDetailsEnabled>
                                            <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                                        </configuration>
                                        <reportSets>
                                            <reportSet>
                                                <reports>
                                                    <report>cim</report>
                                                    <report>dependencies</report>
                                                    <report>issue-tracking</report>
                                                    <report>license</report>
                                                    <report>mailing-list</report>
                                                    <report>plugins</report>
                                                    <report>project-team</report>
                                                    <report>scm</report>
                                                    <report>summary</report>
                                                </reports>
                                            </reportSet>
                                        </reportSets>
                                    </plugin>
                                    <plugin>
                                        <groupId>org.codehaus.mojo</groupId>
                                        <artifactId>taglist-maven-plugin</artifactId>
                                        <!-- version defined in build/pluginManagement section -->
                                        <configuration>
                                            <tagListOptions>
                                                <tagClasses>
                                                    <tagClass>
                                                        <displayName>ToDo</displayName>
                                                        <tags>
                                                            <tag>
                                                                <matchString>@todo</matchString>
                                                                <matchType>exact</matchType>
                                                            </tag>
                                                        </tags>
                                                    </tagClass>
                                                </tagClasses>
                                            </tagListOptions>
                                        </configuration>
                                    </plugin>
                                    <plugin>
                                        <!--
                                        API documentation builder. It will produce documentation
                                        which is then to be used in site:site. It will be
                                        located at target/site/apidocs.
                                        -->
                                        <artifactId>maven-javadoc-plugin</artifactId>
                                        <!-- version defined in build/pluginManagement section -->
                                        <configuration>
                                            <failOnError>true</failOnError>
                                            <stylesheetfile>javadoc/screen.css</stylesheetfile>
                                            <windowtitle>
                                                ${project.name} ${project.version}/${buildNumber} API
                                            </windowtitle>
                                            <quiet>true</quiet>
                                            <tags>
                                                <!--
                                                Here we instruct plugin to use custom tag
                                                @link http://maven.apache.org/plugins/maven-javadoc-plugin/examples/tag-configuration.html
                                                -->
                                                <tag>
                                                    <name>todo</name>
                                                    <placement>a</placement>
                                                    <head>To do:</head>
                                                </tag>
                                            </tags>
                                            <doclet>org.umlgraph.doclet.UmlGraphDoc</doclet>
                                            <docletArtifact>
                                                <groupId>org.umlgraph</groupId>
                                                <artifactId>doclet</artifactId>
                                                <version>5.1</version>
                                            </docletArtifact>
                                            <additionalparam>
                                                -views
                                                -all
                                            </additionalparam>
                                            <useStandardDocletOptions>true</useStandardDocletOptions>
                                        </configuration>
                                        <reportSets>
                                            <reportSet>
                                                <id>html</id>
                                                <reports>
                                                    <report>javadoc</report>
                                                </reports>
                                            </reportSet>
                                        </reportSets>
                                    </plugin>
                                    <plugin>
                                        <!-- version and configuration is in pluginManagement section -->
                                        <groupId>org.codehaus.mojo</groupId>
                                        <artifactId>cobertura-maven-plugin</artifactId>
                                    </plugin>
                                    <plugin>
                                        <!-- version and configuration is in pluginManagement section -->
                                        <groupId>org.codehaus.mojo</groupId>
                                        <artifactId>jdepend-maven-plugin</artifactId>
                                    </plugin>
                                    <plugin>
                                        <!-- version and configuration is in pluginManagement section -->
                                        <groupId>com.rempl.plugins</groupId>
                                        <artifactId>rempl-maven-plugin</artifactId>
                                        <configuration>
                                            <!-- <ignoreIfAbsent>true</ignoreIfAbsent> -->
                                            <rom>src/rempl/rom.xml</rom>
                                        </configuration>
                                    </plugin>
                                </reportPlugins>
                            </configuration>
                            <dependencies>
                                <dependency>
                                    <groupId>com.ymock</groupId>
                                    <artifactId>ymock-tk</artifactId>
                                    <version>1.0-SNAPSHOT</version>
                                </dependency>
                            </dependencies>
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>gmaven-plugin</artifactId>
                        <executions>
                            <execution>
                                <!--
                                When site is ready we need to replace certain strings
                                inside its HTML files, in order to improve readability
                                of the output.
                                -->
                                <id>site-markers</id>
                                <phase>post-site</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <classpath>
                                        <element>
                                            <!-- for file manipulations -->
                                            <groupId>commons-io</groupId>
                                            <artifactId>commons-io</artifactId>
                                            <version>2.0.1</version> <!-- 7 Mar 2011 -->
                                        </element>
                                        <element>
                                            <!-- for manipulations with strings -->
                                            <groupId>commons-lang</groupId>
                                            <artifactId>commons-lang</artifactId>
                                            <version>2.5</version> <!-- 15 Oct 2010 -->
                                        </element>
                                    </classpath>
                                    <properties>
                                        <find>
                                            <![CDATA[
                                            Version: ${project.version}
                                            <title>Coverage Report</title>
                                            ]]>
                                        </find>
                                        <replace>
                                            <![CDATA[
                                            Version: ${project.version}/${buildNumber}
                                            <title>Coverage Report (${project.version}/${buildNumber})</title>
                                            ]]>
                                        </replace>
                                        <target>${project.build.directory}/site</target>
                                    </properties>
                                    <source>
                                        <![CDATA[
                                        import org.apache.commons.io.FileUtils;
                                        import org.apache.commons.io.filefilter.*;
                                        import org.apache.commons.lang.StringUtils;
                                        def dir = new File(project.properties['target'])
                                        if (!dir.exists()) {
                                            log.info("Directory is absent: " + dir)
                                            return
                                        }
                                        def it = FileUtils.iterateFiles(
                                            dir,
                                            new SuffixFileFilter(".html"),
                                            TrueFileFilter.INSTANCE
                                        )
                                        def find = StringUtils.stripAll(
                                            StringUtils.split(project.properties['find'], "\n")
                                        )
                                        def replace = StringUtils.stripAll(
                                            StringUtils.split(project.properties['replace'], "\n")
                                        )
                                        while (it.hasNext()) {
                                            def File file = it.next()
                                            def contents = FileUtils.readFileToString(file)
                                            contents = StringUtils.replaceEach(contents, find, replace)
                                            FileUtils.writeStringToFile(file, contents)
                                        }
                                        ]]>
                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>buildnumber-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <!-- We need this number for site deployment as well -->
                                <id>create-for-site</id>
                                <phase>pre-site</phase>
                                <goals>
                                    <goal>create</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <artifactId>maven-site-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-descriptor</id>
                                <goals>
                                    <goal>attach-descriptor</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
            This profile activates all strict static code analysis validation
            procedures, mandatory for continuous integration.
            -->
            <id>static-analysis</id>
            <activation>
                <property><name>ci</name></property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <!--
                            Coding styling validator. Configuration is inside resources/checkstyle
                            directory. When you edit that file don't forget to install
                            the build-tool project first, and then run this project.
                            -->
                            <artifactId>maven-checkstyle-plugin</artifactId>
                            <version>2.6</version> <!-- 14 October 2010 -->
                            <configuration>
                                <failOnViolation>true</failOnViolation>
                                <failsOnError>true</failsOnError>
                                <consoleOutput>true</consoleOutput>
                                <logViolationsToConsole>true</logViolationsToConsole>
                                <violationSeverity>info</violationSeverity>
                                <!-- the files are inside :ymock-tk module -->
                                <configLocation>checkstyle/checks.xml</configLocation>
                                <headerLocation>checkstyle/LICENSE.txt</headerLocation>
                            </configuration>
                            <dependencies>
                                <dependency>
                                    <groupId>com.ymock</groupId>
                                    <artifactId>ymock-tk</artifactId>
                                    <version>1.0-SNAPSHOT</version>
                                </dependency>
                            </dependencies>
                        </plugin>
                        <plugin>
                            <!--
                            Project Mess Detector, finds coding errors and reports them. In
                            CI environment it should stop the build if some errors are
                            found.
                            -->
                            <artifactId>maven-pmd-plugin</artifactId>
                            <version>2.5</version> <!-- 2 Nov 2010 -->
                            <configuration>
                                <failOnViolation>true</failOnViolation>
                                <targetJdk>${jdk.version}</targetJdk>
                                <aggregate>false</aggregate>
                                <verbose>true</verbose>
                                <linkXRef>false</linkXRef>
                                <rulesets>
                                    <ruleset>pmd/ruleset.xml</ruleset>
                                </rulesets>
                            </configuration>
                            <dependencies>
                                <dependency>
                                    <groupId>com.ymock</groupId>
                                    <artifactId>ymock-tk</artifactId>
                                    <version>1.0-SNAPSHOT</version>
                                </dependency>
                            </dependencies>
                        </plugin>
                        <plugin>
                            <!--
                            Static code analysis to find potential bugs in code. One
                            major drawback in this plugin is that it DOES'T produce
                            any report to the output, only to XML files
                            -->
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>findbugs-maven-plugin</artifactId>
                            <version>2.3.2</version> <!-- 21 Mar 2011 -->
                            <configuration>
                                <threshold>Exp</threshold> <!-- as much to show as possible -->
                                <!--
                                We never fail on error here, instead we let
                                our Groovy code to fail later, after parsing of
                                all errors. It's necessary in order to enable XML
                                parser, which will show the details of every error.
                                -->
                                <failOnError>false</failOnError>
                                <xmlOutput>true</xmlOutput>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>xml-maven-plugin</artifactId>
                            <version>1.0-beta-3-SNAPSHOT</version>
                            <configuration>
                                <validationSets>
                                    <validationSet>
                                        <dir>src/main/resources</dir>
                                        <validating>true</validating>
                                        <includes>
                                            <include>.xml</include>
                                        </includes>
                                    </validationSet>
                                </validationSets>
                            </configuration>
                        </plugin>
                        <plugin>
                            <!--
                            This is a code coverage validator, executed AFTER
                            all unit tests are passed. Cobertura starts all tests
                            again in order to calculate code coverage, and validates
                            that this coverage is in the allowed interval.
                            -->
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>cobertura-maven-plugin</artifactId>
                            <version>2.4</version> <!-- 2 Nov 2010 -->
                            <configuration>
                                <quiet>false</quiet>
                                <check>
                                    <haltOnFailure>true</haltOnFailure>
                                    <lineRate>60</lineRate>
                                    <branchRate>60</branchRate>
                                    <packageLineRate>70</packageLineRate>
                                    <packageBranchRate>70</packageBranchRate>
                                    <totalLineRate>80</totalLineRate>
                                    <totalBranchRate>80</totalBranchRate>
                                </check>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>analyze-only</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>analyze-only</goal>
                                </goals>
                                <configuration>
                                    <ignoreNonCompile>true</ignoreNonCompile>
                                    <failOnWarning>true</failOnWarning>
                                </configuration>
                            </execution>
                            <execution>
                                <id>analyze-dep-mgt</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>analyze-dep-mgt</goal>
                                </goals>
                                <configuration>
                                    <failBuild>true</failBuild>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <configuration>
                                    <!--
                                    Would be nice to have failOnWarnings option as well:
                                    @see http://jira.codehaus.org/browse/MJAVADOC-314
                                    -->
                                    <failOnError>true</failOnError>
                                    <quiet>true</quiet>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <artifactId>maven-checkstyle-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>check-sources</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>check-test-sources</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                                <configuration>
                                    <!-- the files are inside :ymock-tk module -->
                                    <configLocation>checkstyle/checks-test.xml</configLocation>
                                    <sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <artifactId>maven-pmd-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                    <goal>cpd-check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>findbugs-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>gmaven-plugin</artifactId>
                        <executions>
                            <execution>
                                <!--
                                Here we analyze the XML report produced by FindBugs in order
                                to make it readable in console. The XML report contains information
                                about found bugs and warnings. We retrieve them and push
                                to the console. We fail here, not in FindBugs!
                                @link http://docs.codehaus.org/display/GMAVEN/Executing+Groovy+Code
                                @link http://groovy.codehaus.org./Reading+XML+using+Groovy%27s+XmlParser
                                -->
                                <id>findbugs</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <properties>
                                        <xml>${project.build.directory}/findbugsXml.xml</xml>
                                        <failOnError>true</failOnError>
                                    </properties>
                                    <source>
                                        <![CDATA[
                                        def file = new File(project.properties['xml'])
                                        if (!file.exists()) {
                                            log.info("No FindBugs XML report, nothing to parse")
                                            return
                                        }
                                        def xml = new XmlParser().parse(file)
                                        def bugs = xml.BugInstance
                                        def total = bugs.size()
                                        if (total <= 0) { log.info("No errors/warnings found"); return
                                        }
                                        log.info("Total bugs: " + total)
                                        for (i in 0..total-1) {
                                            def bug = bugs[i]
                                            log.info(
                                                bug.LongMessage.text()
                                                + " " + bug.Class.'@classname'
                                                + " " + bug.Class.SourceLine.Message.text()
                                            )
                                        }
                                        if (project.properties['failOnError']) {
                                            fail(total + " FindBugs error(s)")
                                        }
                                        ]]>
                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>cobertura-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>clean</goal>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>xml-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>validate-xml</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>validate</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
            Sign artifacts before installation with GPG.
            -->
            <id>gpg</id>
            <activation>
                <property><name>gpg.keyname</name></property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <!--
                            To GPG-sign the artifact before deployment to foreign
                            repository. GPG keys have to be provided in CI
                            environment, and published beforehand.
                            @link http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/
                            -->
                            <artifactId>maven-gpg-plugin</artifactId>
                            <version>1.1</version> <!-- 21 Dec 2010 -->
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <plugin>
                        <!-- version and configuration is in pluginManagement section -->
                        <artifactId>maven-gpg-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <!--
                Mediator between SLF4j and LOG4j.
                -->
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>1.6.1</version> <!-- 8 Nov 2010 -->
                <scope>test</scope>
            </dependency>
            <dependency>
                <!--
                Main logging facility. All other packages shall
                be forwarded to LOG4J through SLF4J
                -->
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.16</version> <!-- 5 Nov 2010 -->
                <scope>test</scope>
            </dependency>
            <dependency>
                <!--
                We are using JUnit framework for unit test organization
                and management. This framework is the most stable and mature
                in the market. Other options considered: TestNG.
                @link http://www.junit.org/
                -->
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.8.2</version> <!-- 28 Feb 2011 -->
                <scope>test</scope>
            </dependency>
            <dependency>
                <!--
                Assertions and matchers for unit tests.
                @link http://code.google.com/p/hamcrest/wiki/Tutorial
                -->
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-all</artifactId>
                <version>1.1</version> <!-- 6 Apr 2011 -->
                <scope>test</scope>
            </dependency>
            <dependency>
                <!--
                Mockito is used as a mocking library during testing.
                Other options: jMock.
                @link http://www.mockito.org/
                -->
                <groupId>org.mockito</groupId>
                <artifactId>mockito-all</artifactId>
                <version>1.8.5</version> <!-- 9 Oct 2010 -->
            </dependency>
            <dependency>
                <groupId>commons-lang</groupId>
                <artifactId>commons-lang</artifactId>
                <version>2.5</version> <!-- 15 Oct 2010 -->
            </dependency>
            <dependency>
                <!-- for file/stream manipulations -->
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.0.1</version> <!-- 7 Mar 2011 -->
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <resources>
            <!--
            Filter resources in "process-resources" phase
            @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
            -->
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <!--
            Filter resources in "process-resources" phase
            @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
            -->
            <testResource>
                <directory>${basedir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <extensions>
            <!--
            To enable site deployment by FTP.
            @link http://maven.apache.org/wagon/wagon-providers/wagon-ftp/
            @todo #1 There is still a problem. This extension sends all possible
                     details of its execution to stdout, exposing FTP passwords
                     and logins. I already submitted a bug to its developers (WAGON-320),
                     but not luck yet. Maybe we have to create our own extension.
                     @see http://stackoverflow.com/questions/4564018
                     @see http://jira.codehaus.org/browse/WAGON-320
            -->
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ftp</artifactId>
                <version>1.0-beta-7</version> <!-- 18 Dec 2010 -->
            </extension>
        </extensions>
        <pluginManagement>
            <plugins>
                <plugin>
                    <!--
                    API documentation builder. It will produce documentation
                    which is then to be used in site:site. It will be
                    located at target/site/apidocs.
                    -->
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.7</version>  <!-- 12 October 2010 -->
                </plugin>
                <plugin>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.6</version> <!-- 15 May 2011 -->
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>taglist-maven-plugin</artifactId>
                    <version>2.4</version> <!-- 15 Nov 2010 -->
                </plugin>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>2.4.1</version> <!-- 15 May 2011 -->
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.6</version> <!-- 15 May 2011 -->
                </plugin>
                <plugin>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.2</version> <!-- 15 May 2011 -->
                </plugin>
                <plugin>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>2.1.2</version> <!-- 16 Mar 2011 -->
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.3.1</version> <!-- 15 May 2011 -->
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.1</version> <!-- 2 Dec 2010 -->
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.5</version> <!-- 15 May 2011 -->
                </plugin>
                <plugin>
                    <!--
                    Starts unit tests, protocols their results and creates
                    a summary report. It is required to send testing protocol
                    to the STDOUT as well, not only to the file.
                    -->
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.8.1</version> <!-- 15 May 2011 -->
                    <configuration>
                        <useFile>false</useFile>
                        <runOrder>random</runOrder>
                        <trimStackTrace>false</trimStackTrace>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.3.2</version> <!-- 27 Oct 2010 -->
                    <configuration>
                        <source>${jdk.version}</source>
                        <target>${jdk.version}</target>
                        <optimize>true</optimize>
                        <showWarnings>true</showWarnings>
                        <showDeprecation>true</showDeprecation>
                        <!--
                        * @todo #1 Would be nice to have failOnWarning here:
                        *          @see http://jira.codehaus.org/browse/MCOMPILER-151
                        -->
                    </configuration>
                </plugin>
                <plugin>
                    <!--
                    This plugin helps to manage releases and new versions
                    of the product.
                    @link http://maven.apache.org/plugins/maven-release-plugin/usage.html
                    -->
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.1</version>
                    <configuration>
                        <allowTimestampedSnapshots>true</allowTimestampedSnapshots>
                        <preparationGoals>clean</preparationGoals>
                        <goals>deploy</goals>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.0-beta-3</version> <!-- 28 Dec 2010 -->
                    <configuration>
                        <reportPlugins>
                            <!--
                            Section is intentionally empty. Full list of plugins
                            is configured in "CI" profile. We don't need all them
                            during development, that's why they are not here.
                            -->
                        </reportPlugins>
                    </configuration>
                </plugin>
                <plugin>
                    <!--
                    To enable on-fly script executions.
                    @link http://docs.codehaus.org/display/GMAVEN/Executing+Groovy+Code
                    -->
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>gmaven-plugin</artifactId>
                    <version>1.3</version> <!-- 23 Nov 2010 -->
                </plugin>
                <plugin>
                    <!--
                    This plugin will collect current build number
                    from Subversion and save it into MANIFEST.MF. Later,
                    this number is used by different java classes, mostly
                    in order to expose it in web.
                    -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>buildnumber-maven-plugin</artifactId>
                    <version>1.0-beta-4</version>
                    <configuration>
                        <doCheck>false</doCheck>
                        <doUpdate>false</doUpdate>
                        <getRevisionOnlyOnce>true</getRevisionOnlyOnce>
                    </configuration>
                </plugin>
                <plugin>
                    <!--
                    Reporting plugin, we configure it here with
                    defaults for every module
                    -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>jdepend-maven-plugin</artifactId>
                    <version>2.0-beta-2</version> <!-- 7 Nov 2010 -->
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!-- intentionally empty -->
        </plugins>
    </build>

    <reporting>
        <!--
        Rudimentary section, for Maven 2.0 plugins mostly.
        -->
        <excludeDefaults />
    </reporting>

</project>
